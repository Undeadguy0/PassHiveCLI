use colored::*;
use rpassword::read_password;
use std::{
    io::{Write, stdin, stdout},
    path::PathBuf,
};

const main_yellow: (u8, u8, u8) = (246, 196, 32);

pub enum AccountManipulation {
    Regist,
    Auth,
}

pub fn hi() {
    println!("{}", "üêùüêùüêù –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤ PassHiveCLI! üêùüêùüêù".green());
}

pub fn check_success() {
    print!(
        "{}",
        "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ".truecolor(246, 196, 32)
    );
    print!("{}", "—É—Å–ø–µ—à–Ω–æ!\n".green().bold());
    stdout().flush().unwrap();
}

pub fn check_error(os: &String) {
    print!(
        "{}",
        "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ".truecolor(246, 196, 32)
    );
    print!("{}", "–Ω–µ —É–¥–∞–ª–æ—Å—å!\n".red().bold());
    stdout().flush().unwrap();

    println!(
        "{}",
        "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –±–∑–∑üêù".truecolor(246, 196, 32)
    );
    println!("–í–∞—à–∞ –û–° - {}", os.italic());
}

pub fn success_init_dir(path: &PathBuf) {
    print!("{}", "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ".truecolor(246, 196, 32));
    print!("{} ", path.display());
    print!("{}", "—Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n".green().bold());
}

pub fn init_db() {
    println!("{}", "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑—É—Ä—É—é –ë–î, –±–∑–∑\n".truecolor(246, 196, 32));
}

pub fn success_init_db() {
    print!("{}", "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ".truecolor(246, 196, 32));
    print!("{}", "—Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n".green().bold());
}

pub fn throw_err(msg: String) {
    panic!("{}", msg.bold().red());
}

pub fn db_conn_success() {
    print!("{}", "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î ".truecolor(246, 196, 32));
    print!("{}", "—É—Å–ø–µ—à–Ω–æ!\n".green().bold());
}

pub fn registration() -> (String, String) {
    use colored::Colorize;
    use rpassword::read_password;
    use std::io::{Write, stdin, stdout};

    println!("{}", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.".truecolor(246, 196, 32));

    let login = loop {
        let mut input = String::new();
        print!("{}", "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω: ");
        stdout().flush().unwrap();
        stdin().read_line(&mut input).unwrap();

        let input = input.trim();
        if input.is_empty() {
            println!("{}", "–õ–æ–≥–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!".red().bold());
        } else if input.len() <= 3 {
            println!("{}", "–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 3 —Å–∏–º–≤–æ–ª–æ–≤!".red().bold());
        } else if input.contains(' ') {
            println!("{}", "–õ–æ–≥–∏–Ω –Ω–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–±–µ–ª—ã!".red().bold());
        } else {
            break input.to_string();
        }
    };

    let password = loop {
        let mut input = String::new();
        print!(
            "{} ",
            "–í—ã –∂–µ–ª–∞–µ—Ç–µ –≤–≤–æ–¥–∏—Ç—å –ø–∞—Ä–æ–ª—å –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ? (–¥|y/–Ω|n):".truecolor(246, 196, 32)
        );
        stdout().flush().unwrap();
        stdin().read_line(&mut input).unwrap();

        let secret = match input.trim().to_lowercase().as_str() {
            "–¥" | "y" => true,
            "–Ω" | "n" => false,
            _ => {
                println!("{}", "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥!".red().bold());
                continue;
            }
        };

        let mut buf = String::new();
        print!("{}", "\n–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ");
        stdout().flush().unwrap();
        if secret {
            buf = read_password().expect("–û—à–∏–±–∫–∞ —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è");
        } else {
            stdin().read_line(&mut buf).unwrap();
        }

        print!("{}", "\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ");
        stdout().flush().unwrap();
        let mut buf2 = String::new();
        if secret {
            buf2 = read_password().unwrap_or_else(|_| {
                println!("{}", "\n–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞!".red().bold());
                String::new()
            });
        } else {
            stdin().read_line(&mut buf2).unwrap_or_default();
        }

        if buf.trim() != buf2.trim() {
            println!("{}", "\n–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!".red().bold());
            continue;
        }

        break buf.trim().to_string();
    };

    (login.trim().to_string(), password.trim().to_string())
}

pub fn regist_success(login: &String) {
    print!("{}", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ".truecolor(246, 196, 32));
    stdout().flush().unwrap();
    print!("{} ", login);
    stdout().flush().unwrap();
    print!("{}", "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω ".truecolor(246, 196, 32));
    print!("{}", "—É—Å–ø–µ—à–Ω–æ!\n".green().bold());
}

pub fn user_exists_err() {
    println!(
        "{}",
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!"
            .purple()
            .bold()
    );
}

pub fn log_or_reg() -> AccountManipulation {
    let mut input = String::new();

    loop {
        print!(
            "{}",
            "–í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏–ª–∏ –≤–æ–π—Ç–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å? (—Ä|r/–≤|s) "
                .truecolor(246, 196, 32)
        );
        stdout().flush().unwrap();

        if let Err(_) = stdin().read_line(&mut input) {
            throw_err(("–û—à–∏–±–∫–∞ —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏").to_string());
        }

        match input.trim() {
            "–≤" | "s" => return AccountManipulation::Auth,
            "—Ä" | "r" => return AccountManipulation::Regist,
            _ => println!(
                "{}",
                "–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑"
                    .purple()
                    .bold()
            ),
        }
    }
}

pub fn registration_success(login: &String) {
    println!(
        "{} {} {}",
        "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞".truecolor(246, 196, 32),
        login.truecolor(246, 196, 32),
        "—É—Å–ø–µ—à–Ω–∞!".green().bold()
    )
}

pub fn get_auth_data(path: &PathBuf) -> (String, String) {
    let mut input = String::new();

    let login = loop {
        input.clear();

        print!("{}", "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω: ".truecolor(246, 196, 32));
        stdout().flush().unwrap();

        if let Err(_) = stdin().read_line(&mut input) {
            throw_err("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏!".to_string());
        }

        if input.trim().len() == 0 {
            println!("{}", "\n–õ–æ–≥–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ü–£–°–¢–´–ú!".purple().bold());
            continue;
        }

        break input.clone();
    };

    let password = loop {
        input.clear();

        print!("{}", "\n–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ".truecolor(246, 196, 32));
        stdout().flush().unwrap();

        match rpassword::read_password() {
            Ok(pass) => {
                if pass.trim().len() == 0 {
                    println!("{}", "\n–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!".purple().bold());
                    continue;
                }
                break pass;
            }
            Err(_) => throw_err("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏!".to_string()),
        }
    };

    (login.trim().to_string(), password.trim().to_string())
}

pub fn auth_seccess() {
    println!(
        "{} {}",
        "–í—Ö–æ–¥ –≤ —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å".truecolor(246, 196, 32),
        "—É—Å–ø–µ—à–Ω–∞!".green().bold()
    );
}

pub fn auth_failure() {
    println!("{}", "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏–ª–∏ –ª–æ–≥–∏–Ω!".purple().bold());
}
