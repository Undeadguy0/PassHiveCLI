use crossterm::terminal::{disable_raw_mode, enable_raw_mode};
use rusqlite::fallible_iterator::Chain;
use strum::IntoEnumIterator;
use unicode_width::UnicodeWidthStr;

use super::db::models;
use super::main;
use crate::db::models::{DataAndMeta, DataType, Sex};
use crate::{ShowableData, update_or_save};
use colored::{ColoredString, Colorize, Style};
use rpassword::read_password;
use std::cmp::{max, min};
use std::io::{Write, stdin, stdout};
use std::{collections::BTreeMap, path::PathBuf};
use std::{num, usize};

fn titlemaker(len: usize, title: &String, chars: &String) -> String {
    if title.len() >= len {
        return title.clone(); // –∏–ª–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–µ–∫–æ—Ä–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
    }

    let decorator = (len - title.len()) / 2 + 1;
    chars.repeat(decorator) + title + &chars.repeat(decorator)
}

trait ColoredAsStr {
    fn colored_repeat(&self, times: usize) -> ColoredString;
}

trait StrAsColored {
    fn colorize(&self, rgb: &(u8, u8, u8)) -> ColoredString;
}

impl StrAsColored for String {
    fn colorize(&self, rgb: &(u8, u8, u8)) -> ColoredString {
        self.truecolor(rgb.0, rgb.1, rgb.2)
    }
}
impl ColoredAsStr for ColoredString {
    fn colored_repeat(&self, times: usize) -> ColoredString {
        let fgcolor = self.fgcolor;
        let bgcolor = self.bgcolor;
        let style = self.style;

        let mut total = self.input.repeat(times).white();

        if let Some(f) = fgcolor {
            total.fgcolor = Some(f);
        }
        if let Some(b) = bgcolor {
            total.bgcolor = Some(b);
        }
        total.style = style;
        total
    }
}

pub struct TableStyle {
    horizontal_frame: ColoredString,
    horizontal_inner: ColoredString,
    vertical_frame: ColoredString,
    vertical_inner: ColoredString,
    split: ColoredString,
    header_color_rgb: (u8, u8, u8),
    text_color_rgb: (u8, u8, u8),
}

impl TableStyle {
    pub fn new(
        horizontal_frame: ColoredString,
        horizontal_inner: ColoredString,
        vertical_frame: ColoredString,
        vertical_inner: ColoredString,
        split: ColoredString,
        header_color_rgb: (u8, u8, u8),
        text_color_rgb: (u8, u8, u8),
    ) -> Self {
        TableStyle {
            header_color_rgb,
            text_color_rgb,
            horizontal_frame,
            horizontal_inner,
            vertical_frame,
            vertical_inner,
            split,
        }
    }
}

pub struct DataFromUser {
    name: Option<String>,
    notice: Option<String>,
    data_type: models::DataType,
    data: String,
}

impl DataFromUser {
    fn new(
        name: Option<String>,
        notice: Option<String>,
        data_type: models::DataType,
        data: String,
    ) -> Self {
        DataFromUser {
            name,
            notice,
            data_type,
            data,
        }
    }
}

const main_yellow: (u8, u8, u8) = (246, 196, 32);

pub enum AccountManipulation {
    Regist,
    Auth,
}

pub fn hi() {
    println!("{}", "üêùüêùüêù –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤ PassHiveCLI! üêùüêùüêù".green());
}

pub fn check_success() {
    print!(
        "{}",
        "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ".truecolor(246, 196, 32)
    );
    print!("{}", "—É—Å–ø–µ—à–Ω–æ!\n".green().bold());
    stdout().flush().unwrap();
}

pub fn check_error(os: &String) {
    print!(
        "{}",
        "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ".truecolor(246, 196, 32)
    );
    print!("{}", "–Ω–µ —É–¥–∞–ª–æ—Å—å!\n".red().bold());
    stdout().flush().unwrap();

    println!(
        "{}",
        "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –±–∑–∑üêù".truecolor(246, 196, 32)
    );
    println!("–í–∞—à–∞ –û–° - {}", os.italic());
}

pub fn success_init_dir(path: &PathBuf) {
    print!("{}", "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ".truecolor(246, 196, 32));
    print!("{} ", path.display());
    print!("{}", "—Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n".green().bold());
}

pub fn init_db() {
    println!("{}", "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑—É—Ä—É—é –ë–î, –±–∑–∑\n".truecolor(246, 196, 32));
}

pub fn success_init_db() {
    print!("{}", "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ".truecolor(246, 196, 32));
    print!("{}", "—Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n".green().bold());
}

pub fn throw_err(msg: String) {
    panic!("{}", msg.bold().red());
}

pub fn db_conn_success() {
    print!("{}", "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î ".truecolor(246, 196, 32));
    print!("{}", "—É—Å–ø–µ—à–Ω–æ!\n".green().bold());
}

pub fn registration() -> (String, String) {
    println!("{}", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.".truecolor(246, 196, 32));

    let login = loop {
        let mut input = String::new();
        print!("{}", "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω: ");
        stdout().flush().unwrap();
        stdin().read_line(&mut input).unwrap();

        let input = input.trim();
        if input.is_empty() {
            println!("{}", "–õ–æ–≥–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!".red().bold());
        } else if input.len() <= 3 {
            println!("{}", "–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 3 —Å–∏–º–≤–æ–ª–æ–≤!".red().bold());
        } else if input.contains(' ') {
            println!("{}", "–õ–æ–≥–∏–Ω –Ω–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–±–µ–ª—ã!".red().bold());
        } else {
            break input.to_string();
        }
    };

    let password = loop {
        let mut input = String::new();
        print!(
            "{} ",
            "–í—ã –∂–µ–ª–∞–µ—Ç–µ –≤–≤–æ–¥–∏—Ç—å –ø–∞—Ä–æ–ª—å –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ? (–¥|y/–Ω|n):".truecolor(246, 196, 32)
        );
        stdout().flush().unwrap();
        stdin().read_line(&mut input).unwrap();

        let secret = match input.trim().to_lowercase().as_str() {
            "–¥" | "y" => true,
            "–Ω" | "n" => false,
            _ => {
                println!("{}", "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥!".red().bold());
                continue;
            }
        };

        let mut buf = String::new();
        print!("{}", "\n–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ");
        stdout().flush().unwrap();
        if secret {
            buf = read_password().expect("–û—à–∏–±–∫–∞ —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è");
        } else {
            stdin().read_line(&mut buf).unwrap();
        }

        print!("{}", "\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ");
        stdout().flush().unwrap();
        let mut buf2 = String::new();
        if secret {
            buf2 = read_password().unwrap_or_else(|_| {
                println!("{}", "\n–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞!".red().bold());
                String::new()
            });
        } else {
            stdin().read_line(&mut buf2).unwrap_or_default();
        }

        if buf.trim() != buf2.trim() {
            println!("{}", "\n–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!".red().bold());
            continue;
        }

        break buf.trim().to_string();
    };

    (login.trim().to_string(), password.trim().to_string())
}

pub fn regist_success(login: &String) {
    print!("{}", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ".truecolor(246, 196, 32));
    stdout().flush().unwrap();
    print!("{} ", login);
    stdout().flush().unwrap();
    print!("{}", "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω ".truecolor(246, 196, 32));
    print!("{}", "—É—Å–ø–µ—à–Ω–æ!\n".green().bold());
}

pub fn user_exists_err() {
    println!(
        "{}",
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!"
            .purple()
            .bold()
    );
}

pub fn log_or_reg() -> AccountManipulation {
    let mut input = String::new();

    loop {
        input.clear();
        print!(
            "{}",
            "–í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏–ª–∏ –≤–æ–π—Ç–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å? (—Ä|r/–≤|s) "
                .truecolor(246, 196, 32)
        );
        stdout().flush().unwrap();

        if let Err(_) = stdin().read_line(&mut input) {
            throw_err(("–û—à–∏–±–∫–∞ —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏").to_string());
        }

        match input.trim() {
            "–≤" | "s" => return AccountManipulation::Auth,
            "—Ä" | "r" => return AccountManipulation::Regist,
            _ => {
                println!(
                    "{}",
                    "–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑"
                        .purple()
                        .bold()
                );
                // println!("{input}");
            }
        }
    }
}

pub fn registration_success(login: &String) {
    println!(
        "{} {} {}",
        "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞".truecolor(246, 196, 32),
        login.truecolor(246, 196, 32),
        "—É—Å–ø–µ—à–Ω–∞!".green().bold()
    )
}

pub fn get_auth_data(path: &PathBuf) -> (String, String) {
    let mut input = String::new();

    let login = loop {
        input.clear();

        print!("{}", "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω: ".truecolor(246, 196, 32));
        stdout().flush().unwrap();

        if let Err(_) = stdin().read_line(&mut input) {
            throw_err("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏!".to_string());
        }

        if input.trim().len() == 0 {
            println!("{}", "\n–õ–æ–≥–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ü–£–°–¢–´–ú!".purple().bold());
            continue;
        }

        break input.clone();
    };

    let password = loop {
        input.clear();

        print!("{}", "\n–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ".truecolor(246, 196, 32));
        stdout().flush().unwrap();

        match rpassword::read_password() {
            Ok(pass) => {
                if pass.trim().len() == 0 {
                    println!("{}", "\n–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!".purple().bold());
                    continue;
                }
                break pass;
            }
            Err(_) => throw_err("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏!".to_string()),
        }
    };

    (login.trim().to_string(), password.trim().to_string())
}

pub fn auth_seccess() {
    println!(
        "{} {}",
        "–í—Ö–æ–¥ –≤ —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å".truecolor(246, 196, 32),
        "—É—Å–ø–µ—à–Ωe–Ω!".green().bold()
    );
}

pub fn auth_failure() {
    println!("{}", "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏–ª–∏ –ª–æ–≥–∏–Ω!".purple().bold());
}

pub fn show_all_data(data: &BTreeMap<String, Vec<ShowableData>>) {
    let mut counter = 0u32;
    let mut not_empty = false;
    let len = 30usize;

    for entry in data.iter() {
        let header: &str;
        match entry.0.as_str() {
            "password" => header = "–ø–∞—Ä–æ–ª–∏",
            "card" => header = "–±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã",
            "passport" => header = "–ø–∞—Å—Å–ø–æ—Ä—Ç—ã",
            "document" => header = "–¥–æ–∫—É–º–µ–Ω—Ç—ã",
            "wificonfig" => header = "Wifi —Å–µ—Ç–∏",
            "token" => header = "—Ç–æ–∫–µ–Ω—ã",
            _ => unreachable!("–û—à–∏–±–∫–∞ –∏–º–µ–Ω–∏ –∫–ª—é—á–∞ –≤ BTree!!!"),
        }
        if !entry.1.is_empty() {
            not_empty = true;
            let header_len = UnicodeWidthStr::width(header);
            let decorate = "#".repeat((len - header_len) / 2 + 1);

            println!(
                "{} {} {}.",
                &decorate.truecolor(246, 196, 32),
                &header,
                &decorate.truecolor(246, 196, 32)
            );

            for row in entry.1.iter() {
                let data_in_str = row
                    .data
                    .to_string()
                    .split("\n")
                    .map(|x| x.to_string())
                    .collect::<Vec<_>>()
                    .join("\n");
                println!(
                    "{} {}",
                    (counter.to_string() + ":").truecolor(246, 196, 32),
                    &(row.name).truecolor(246, 196, 32)
                );
                counter += 1;
            }
        }
    }

    if !not_empty {
        println!(
            "{}",
            "########## –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–¥–µ—Å—å –ø—É—Å—Ç–æ... ########"
                .to_string()
                .truecolor(246, 196, 32)
        );
    }

    println!("")
}

pub fn show_hotkeys() {
    disable_raw_mode().unwrap();
    println!("{}", "–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏:".truecolor(246, 196, 32).bold());
    println!(
        "{} {}",
        "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å -".truecolor(246, 196, 32),
        "CTRL + A".bold()
    );
    println!(
        "{} {}",
        "–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å -".truecolor(246, 196, 32),
        "CTRL + D".bold()
    );
    println!(
        "{} {}",
        "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å -".truecolor(246, 196, 32),
        "CTRL + U".bold()
    );
    println!(
        "{} {}",
        "–í—ã–π—Ç–∏ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è -".truecolor(246, 196, 32),
        "CTRL + E".bold()
    );
    enable_raw_mode().unwrap();
}

pub fn get_new_row_data() -> Result<DataAndMeta, String> {
    disable_raw_mode().unwrap();

    let mut input = String::new();

    print!(
        "{}",
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):".truecolor(246, 196, 32)
    );
    stdout().flush().unwrap();
    stdin()
        .read_line(&mut input)
        .map_err(|_| "–û—à–∏–±–∫–∞ —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏!".to_string())?;
    let name = input.trim().to_string();
    input.clear();

    print!(
        "\n{}",
        "–í–≤–µ–¥–∏—Ç–µ –ø–æ—è—Å–Ω–µ–Ω–∏–µ –∫ –∑–∞–ø–∏—Å–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):".truecolor(246, 196, 32)
    );
    stdout().flush().unwrap();
    stdin()
        .read_line(&mut input)
        .map_err(|_| "–û—à–∏–±–∫–∞ —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏!".to_string())?;
    let notice = input.trim().to_string();
    input.clear();

    let all_data_types: Vec<DataType> = DataType::iter().collect();
    println!(
        "\n{}",
        "########## –¢–∏–ø—ã –∑–∞–ø–∏—Å–µ–π ##########".truecolor(246, 196, 32)
    );
    for (idx, dt) in all_data_types.iter().enumerate() {
        println!("{}: {}", (idx + 1).to_string().bold(), dt.name());
    }
    print!(
        "{}",
        "\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–ø–∏—Å–∏ (–Ω–æ–º–µ—Ä): ".truecolor(246, 196, 32)
    );
    stdout().flush().unwrap();

    let ind_of_type: usize;
    loop {
        input.clear();
        stdin()
            .read_line(&mut input)
            .map_err(|_| "–û—à–∏–±–∫–∞ —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏!".to_string())?;
        match input.trim().parse::<usize>() {
            Err(_) => {
                println!(
                    "\n{}",
                    "–û—à–∏–±–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                        .purple()
                        .bold()
                );
                continue;
            }
            Ok(ind) if ind == 0 || ind > all_data_types.len() => {
                println!(
                    "\n{}",
                    "–û—à–∏–±–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                        .purple()
                        .bold()
                );
                continue;
            }
            Ok(ind) => {
                ind_of_type = ind - 1;
                break;
            }
        }
    }

    let data = match &all_data_types[ind_of_type] {
        DataType::Card { .. } => {
            let card_num: String;
            loop {
                print!(
                    "\n{} ",
                    "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (16 —Ü–∏—Ñ—Ä):".truecolor(246, 196, 32)
                );
                stdout().flush().unwrap();
                input.clear();
                stdin()
                    .read_line(&mut input)
                    .map_err(|_| "–û—à–∏–±–∫–∞ —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏!".to_string())?;
                let trimmed = input.trim();
                if trimmed.len() != 16 {
                    println!("\n{}", "–í –Ω–æ–º–µ—Ä–µ –∫–∞—Ä—Ç—ã 16 —Ü–∏—Ñ—Ä!".purple().bold());
                    continue;
                }
                if !trimmed.chars().all(|c| c.is_ascii_digit()) {
                    println!(
                        "\n{}",
                        "–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã!".purple().bold()
                    );
                    continue;
                }
                card_num = trimmed.to_string();
                break;
            }

            let card_cvv: u16;
            loop {
                print!(
                    "\n{} ",
                    "–í–≤–µ–¥–∏—Ç–µ CVV –∫–∞—Ä—Ç—ã (4 —Ü–∏—Ñ—Ä—ã):".truecolor(246, 196, 32)
                );
                stdout().flush().unwrap();
                input.clear();
                stdin()
                    .read_line(&mut input)
                    .map_err(|_| "–û—à–∏–±–∫–∞ —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏!".to_string())?;
                let trimmed = input.trim();
                if trimmed.len() != 4 {
                    println!("\n{}", "–í CVV –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 4 —Ü–∏—Ñ—Ä—ã!".purple().bold());
                    continue;
                }
                if !trimmed.chars().all(|c| c.is_ascii_digit()) {
                    println!("\n{}", "CVV –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã!".purple().bold());
                    continue;
                }
                card_cvv = trimmed
                    .parse::<u16>()
                    .map_err(|_| "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ CVV!".to_string())?;
                break;
            }

            print!(
                "\n{}",
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ): ".truecolor(246, 196, 32)
            );
            stdout().flush().unwrap();
            input.clear();
            stdin()
                .read_line(&mut input)
                .map_err(|_| "–û—à–∏–±–∫–∞ —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏!".to_string())?;
            let card_bank = input.trim().to_string();

            DataType::Card {
                num: card_num,
                cvv: card_cvv,
                bank: card_bank,
            }
        }
        DataType::Token { .. } => {
            print!(
                "\n{}",
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, GitHub): ".truecolor(246, 196, 32)
            );
            stdout().flush().unwrap();
            input.clear();
            stdin()
                .read_line(&mut input)
                .map_err(|_| "–û—à–∏–±–∫–∞ —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏!".to_string())?;
            let from = input.trim().to_string();
            print!("\n{}", "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω: ".truecolor(246, 196, 32));
            stdout().flush().unwrap();
            input.clear();
            stdin()
                .read_line(&mut input)
                .map_err(|_| "–û—à–∏–±–∫–∞ —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏!".to_string())?;
            let token = input.trim().to_string();

            let result = DataType::Token { token, from };
            result
        }
        DataType::Password { .. } => {
            print!("\n{}", "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ".truecolor(246, 196, 32));
            stdout().flush().unwrap();
            let password =
                rpassword::read_password().map_err(|_| "–û—à–∏–±–∫–∞ —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è!".to_string())?;

            print!("\n{}", "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ".truecolor(246, 196, 32));
            stdout().flush().unwrap();
            let password_confirm =
                rpassword::read_password().map_err(|_| "–û—à–∏–±–∫–∞ —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è!".to_string())?;

            if password != password_confirm {
                println!("\n{}", "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!".purple().bold());
                enable_raw_mode().unwrap();
                return Err("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–ª–∏".to_string());
            }

            let result = DataType::Password { password };
            result
        }
        DataType::WifiConfig { .. } => {
            print!("\n{}", "–í–≤–µ–¥–∏—Ç–µ –∏–º—è Wi-Fi —Å–µ—Ç–∏: ".truecolor(246, 196, 32));
            stdout().flush().unwrap();
            input.clear();
            stdin()
                .read_line(&mut input)
                .map_err(|_| "–û—à–∏–±–∫–∞ —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏!".to_string())?;
            let name = input.trim().to_string();

            print!("\n{}", "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å Wi-Fi: ".truecolor(246, 196, 32));
            stdout().flush().unwrap();
            input.clear();
            stdin()
                .read_line(&mut input)
                .map_err(|_| "–û—à–∏–±–∫–∞ —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏!".to_string())?;
            let password = input.trim().to_string();

            let result = DataType::WifiConfig { name, password };
            result
        }
        DataType::Document { .. } => {
            println!(
                "\n{}",
                "–í–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–∑–∞–≤–µ—Ä—à–∏—Ç–µ –≤–≤–æ–¥ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π):"
                    .truecolor(246, 196, 32)
            );
            let mut text_lines = Vec::new();
            loop {
                input.clear();
                stdin()
                    .read_line(&mut input)
                    .map_err(|_| "–û—à–∏–±–∫–∞ —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏!".to_string())?;
                let line = input.trim_end();
                if line.is_empty() {
                    break;
                }
                text_lines.push(line.to_string());
            }
            let text = text_lines.join("\n");

            let result = DataType::Document { text };
            result
        }
        DataType::Passport { .. } => {
            print!("\n{}", "–í–≤–µ–¥–∏—Ç–µ –§–ò–û: ".truecolor(246, 196, 32));
            stdout().flush().unwrap();
            input.clear();
            stdin()
                .read_line(&mut input)
                .map_err(|_| "–û—à–∏–±–∫–∞ —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏!".to_string())?;
            let fsl = input.trim().to_string();
            print!(
                "\n{}",
                "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì): ".truecolor(246, 196, 32)
            );
            stdout().flush().unwrap();
            input.clear();
            stdin()
                .read_line(&mut input)
                .map_err(|_| "–û—à–∏–±–∫–∞ —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏!".to_string())?;
            let date = input.trim().to_string();

            print!("\n{}", "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª (–º/–∂): ".truecolor(246, 196, 32));
            stdout().flush().unwrap();
            input.clear();
            stdin()
                .read_line(&mut input)
                .map_err(|_| "–û—à–∏–±–∫–∞ —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏!".to_string())?;
            let sex = match input.trim().to_lowercase().as_str() {
                "–º" | "male" => models::Sex::Male,
                "–∂" | "female" => models::Sex::Female,
                _ => {
                    println!(
                        "\n{}",
                        "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ –ø–æ–ª–∞, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –º—É–∂—Å–∫–æ–π.".purple().bold()
                    );
                    models::Sex::Male
                }
            };

            let serial: u16;
            loop {
                print!(
                    "\n{}",
                    "–í–≤–µ–¥–∏—Ç–µ —Å–µ—Ä–∏—é –ø–∞—Å–ø–æ—Ä—Ç–∞ (4 —Ü–∏—Ñ—Ä—ã): ".truecolor(246, 196, 32)
                );
                stdout().flush().unwrap();
                input.clear();
                stdin()
                    .read_line(&mut input)
                    .map_err(|_| "–û—à–∏–±–∫–∞ —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏!".to_string())?;
                let trimmed = input.trim();
                if trimmed.len() != 4 || !trimmed.chars().all(|c| c.is_ascii_digit()) {
                    println!("\n{}", "–°–µ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–∑ 4 —Ü–∏—Ñ—Ä!".purple().bold());
                    continue;
                }
                serial = trimmed
                    .parse::<u16>()
                    .map_err(|_| "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–µ—Ä–∏–∏!".to_string())?;
                break;
            }

            let num: u32;
            loop {
                print!(
                    "\n{}",
                    "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞ (6 —Ü–∏—Ñ—Ä): ".truecolor(246, 196, 32)
                );
                stdout().flush().unwrap();
                input.clear();
                stdin()
                    .read_line(&mut input)
                    .map_err(|_| "–û—à–∏–±–∫–∞ —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏!".to_string())?;
                let trimmed = input.trim();
                if trimmed.len() != 6 || !trimmed.chars().all(|c| c.is_ascii_digit()) {
                    println!("\n{}", "–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑ 6 —Ü–∏—Ñ—Ä!".purple().bold());
                    continue;
                }
                num = trimmed
                    .parse::<u32>()
                    .map_err(|_| "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–æ–º–µ—Ä–∞!".to_string())?;
                break;
            }

            let result = DataType::Passport {
                fsl,
                date,
                sex,
                serial,
                num,
            };
            result
        }
    };
    enable_raw_mode().unwrap();
    return Ok(DataAndMeta::new(data, name, notice));
}

pub fn show_data_extended(data: &BTreeMap<String, Vec<ShowableData>>, style: &TableStyle) {
    disable_raw_mode().expect("–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥—ã –∏–∑ —Å—ã—Ä–æ–≥–æ —Ä–µ–∂–∏–º–∞!");
    let mut len = 0usize;
    let mut size = 0usize;
    let mut counter = 1usize;

    for section in data {
        if let Some(first) = section.1.first() {
            len = max(len, first.data.name().len());
        }

        for item in section.1 {
            size += 1;
            let max_line_len = item
                .data
                .to_string()
                .split('\n')
                .map(|line| line.len())
                .max()
                .unwrap_or(0);

            len = max(len, max_line_len);
        }
    }

    let num_buf = size.to_string().len();
    println!(
        "{}",
        style.horizontal_frame.colored_repeat(len + num_buf + 7)
    );

    for section in data {
        match section.1.first() {
            Some(d) => {
                let title_raw = d.data.name();
                let title_colored = title_raw.colorize(&style.header_color_rgb);
                let visible_width = UnicodeWidthStr::width(title_raw.as_str());
                let total_width = len + num_buf + 4;
                let padding = total_width.saturating_sub(visible_width - 1);

                println!(
                    "{} {} {}",
                    style.vertical_frame,
                    style.horizontal_inner.colored_repeat(total_width),
                    style.vertical_frame
                );

                println!(
                    "{} {}{}{}",
                    style.vertical_frame,
                    title_colored,
                    " ".repeat(padding),
                    style.vertical_frame
                );

                println!(
                    "{} {} {}",
                    style.vertical_frame,
                    style.horizontal_inner.colored_repeat(total_width),
                    style.vertical_frame
                );
            }
            None => {}
        }
        if section.1.len() != 0 {
            for data in section.1 {
                let name_width = UnicodeWidthStr::width(data.name.as_str());
                let pad_name = len.saturating_sub(name_width);

                println!(
                    "{} {} {} –ù–∞–∑–≤–∞–Ω–∏–µ:{}{}{}",
                    style.vertical_frame,
                    counter,
                    style.vertical_inner,
                    data.name.colorize(&style.text_color_rgb),
                    " ".repeat(pad_name - 7),
                    style.vertical_frame,
                );

                let notice_width = UnicodeWidthStr::width(data.notice.as_str());
                let pad_notice = len.saturating_sub(notice_width);

                println!(
                    "{} {} {} –ó–∞–º–µ—Ç–∫–∞:{}{}{}",
                    style.vertical_frame,
                    " ".repeat(num_buf),
                    style.vertical_inner,
                    data.notice.colorize(&style.text_color_rgb),
                    " ".repeat(pad_notice - 6),
                    style.vertical_frame,
                );

                for line in data.data.to_string().split("\n") {
                    let line_to_print: &str = &line.to_string().colorize(&style.text_color_rgb);
                    let visible_width = UnicodeWidthStr::width(line_to_print);
                    let pad = len.saturating_sub(visible_width);

                    println!(
                        "{} {} {} {}{}{}",
                        style.vertical_frame,
                        " ".repeat(num_buf),
                        style.vertical_inner,
                        line_to_print,
                        " ".repeat(pad + 2),
                        style.vertical_frame,
                    );
                }

                println!(
                    "{}{}{}",
                    style.vertical_frame,
                    style.split.colored_repeat(len + num_buf + 6),
                    style.vertical_frame,
                );

                counter += 1;
            }
        }
    }
    println!(
        "{}",
        style.horizontal_frame.colored_repeat(len + num_buf + 7)
    );
    enable_raw_mode().expect("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å—ã—Ä–æ–π —Ä–µ–∂–∏–º!");
}

pub fn select_id_to_delete(
    all_data: &BTreeMap<String, Vec<ShowableData>>,
) -> (i64, (usize, usize)) /* –∏–Ω–¥–µ–∫—Å –≤ –ë–î + (–∏–Ω–¥–µ–∫—Å –æ–±–ª–∞—Å—Ç–∏, –∏–Ω–¥–µ–∫—Å –≤ –≤–µ–∫—Ç–æ—Ä–µ) */ {
    disable_raw_mode().expect("–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å—ã—Ä–æ–≥–æ —Ä–µ–∂–∏–º–∞");

    print!(
        "{} ",
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏ –∫ —É–¥–∞–ª–µ–Ω–∏—é (—Å–ª–µ–≤–∞ –æ—Ç –∑–∞–ø–∏—Å–∏):"
            .to_string()
            .truecolor(246, 196, 32)
    );
    stdout().flush().unwrap();

    let mut input = String::new();

    loop {
        stdin()
            .read_line(&mut input)
            .expect("–û—à–∏–±–∫–∞ —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è –≤–≤–æ–¥–∞!");

        match input.trim().parse::<u16>() {
            Err(_) => println!("–û—à–∏–±–∫–∞ –≤–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º –Ω–æ–º–µ—Ä–µ!"),
            Ok(num) => {
                let ind = (num - 1) as usize;
                match find_data_by_index(all_data, ind) {
                    None => {
                        println!("{}", "–û—à–∏–±–∫–∞, –Ω–µ—Ç –∑–∞–ø–∏—Å–∏ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º!".purple().bold());
                        continue;
                    }
                    Some((partision, local_index)) => {
                        for part in all_data.iter().enumerate() {
                            if part.0 == partision {
                                let target = &part.1.1[local_index];
                                return (target.id, (partision, local_index));
                            }
                        }
                    }
                }
            }
        }

        input.clear();
    }
    enable_raw_mode().expect("–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ —Å—ã—Ä–æ–π —Ä–µ–∂–∏–º");
    (0, (0, 0))
}

fn find_data_by_index(
    data: &BTreeMap<String, Vec<ShowableData>>,
    index: usize,
) -> Option<(usize, usize)> {
    let mut counter = 0usize;
    let mut part = 0usize;
    let mut ind = 0usize;

    for entry in data {
        if let Some(_) = entry.1.first() {
            for _ in entry.1 {
                if counter == index {
                    return Some((part, ind));
                }
                counter += 1;
                ind += 1;
            }
        }
        part += 1;
        ind = 0;
    }
    None
}

pub fn select_id_to_update(
    all_data: &BTreeMap<String, Vec<ShowableData>>,
) -> (i64, (usize, usize)) {
    disable_raw_mode().expect("–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å—ã—Ä–æ–≥–æ —Ä–µ–∂–∏–º–∞");

    print!(
        "{} ",
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏ –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—é (—Å–ª–µ–≤–∞ –æ—Ç –∑–∞–ø–∏—Å–∏):"
            .to_string()
            .truecolor(246, 196, 32)
    );
    stdout().flush().unwrap();

    let mut input = String::new();

    loop {
        stdin()
            .read_line(&mut input)
            .expect("–û—à–∏–±–∫–∞ —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è –≤–≤–æ–¥–∞!");

        match input.trim().parse::<u16>() {
            Err(_) => println!("–û—à–∏–±–∫–∞ –≤–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º –Ω–æ–º–µ—Ä–µ!"),
            Ok(num) => {
                let ind = (num - 1) as usize;
                match find_data_by_index(all_data, ind) {
                    None => {
                        println!("{}", "–û—à–∏–±–∫–∞, –Ω–µ—Ç –∑–∞–ø–∏—Å–∏ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º!".purple().bold());
                        continue;
                    }
                    Some((partision, local_index)) => {
                        for part in all_data.iter().enumerate() {
                            if part.0 == partision {
                                let target = &part.1.1[local_index];
                                return (target.id, (partision, local_index));
                            }
                        }
                    }
                }
            }
        }

        input.clear();
    }
    enable_raw_mode().expect("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å—ã—Ä–æ–π —Ä–µ–∂–∏–º");
    (0, (0, 0))
}

pub fn correct_data(data: &mut ShowableData) -> ShowableData {
    let mut input = String::new();

    print!(
        "{}",
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏. –õ–∏–±–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ ENTER:".truecolor(246, 196, 32)
    );
    stdout().flush().unwrap();
    stdin()
        .read_line(&mut input)
        .expect("–û—à–∏–±–∫–∞ —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏");
    let new_name = {
        if input.trim().len() == 0 {
            None
        } else {
            Some(input.trim().to_string())
        }
    };
    input.clear();
    print!(
        "{}",
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏. –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ ENTER".truecolor(246, 196, 32)
    );
    stdout().flush().unwrap();
    stdin()
        .read_line(&mut input)
        .expect("–û—à–∏–±–∫–∞ —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è –≤–≤–æ–¥–∞");
    let new_notice = {
        if input.trim().len() == 0 {
            None
        } else {
            Some(input.trim().to_string())
        }
    };
    match data.data.clone() {
        DataType::Card { num, cvv, bank } => {
            let new_num: Option<String> = loop {
                print!(
                    "{} ",
                    "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ ENTER:".truecolor(246, 196, 32)
                );
                stdout().flush().unwrap();

                input.clear();
                stdin()
                    .read_line(&mut input)
                    .expect("–û—à–∏–±–∫–∞ —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è –≤–≤–æ–¥–∞");

                if input.trim().len() == 0 {
                    break None;
                } else {
                    if input.trim().len() != 16 {
                        println!(
                            "{}",
                            "–í –Ω–æ–º–µ—Ä–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –®–ï–°–¢–ù–ê–î–¶–ê–¢–¨ —Ü–∏—Ñ—Ä".purple().bold()
                        );
                        continue;
                    }
                    input = input.trim().to_string();
                    if !(input.chars().all(|char| char.is_digit(10))) {
                        println!("{}", "–í –Ω–æ–º–µ—Ä–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¢–û–õ–¨–ö–û —Ü–∏—Ñ—Ä—ã".purple().bold());
                        continue;
                    }

                    break Some(input.clone());
                }
            };

            let new_cvv: Option<u16> = loop {
                print!(
                    "{} ",
                    "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π CVV, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ ENTER:".truecolor(246, 196, 32)
                );
                stdout().flush().unwrap();

                input.clear();
                stdin()
                    .read_line(&mut input)
                    .expect("–û—à–∏–±–∫–∞ —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è –≤–≤–æ–¥–∞!");

                if input.trim().len() == 0 {
                    break None;
                }

                match input.trim().parse::<u16>() {
                    Err(_) => {
                        println!("{}", "–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞!".purple().bold());
                        continue;
                    }
                    Ok(cv) => {
                        if cv.to_string().len() == 4 {
                            break Some(cv);
                        }
                        println!("{}", "–í CVV –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ß–ï–¢–´–†–ï —Ü–∏—Ñ—Ä—ã!".purple().bold());
                        continue;
                    }
                }
            };

            let new_bank: Option<String> = loop {
                print!(
                    "{} ",
                    "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–Ω–∫. –ò–Ω–∞—á–µ –≤–≤–µ–¥–∏—Ç–µ ENTER:".truecolor(246, 196, 32)
                );
                stdout().flush().unwrap();

                input.clear();
                stdin()
                    .read_line(&mut input)
                    .expect("–û—à–∏–±–∫–∞ —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è –≤–≤–æ–¥–∞");

                match input.trim().len() {
                    0 => break None,
                    _ => break Some(input.trim().to_string()),
                }
            };

            return ShowableData {
                id: data.id,
                name: update_or_save(new_name, data.name.clone()),
                notice: update_or_save(new_notice, data.notice.clone()),
                data: DataType::Card {
                    num: update_or_save(new_num, num),
                    cvv: update_or_save(new_cvv, cvv),
                    bank: update_or_save(new_bank, bank),
                },
            };
        }
        DataType::Document { .. } => {
            let mut new_text = String::new();
            println!(
                "{}",
                "–í–≤–æ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ—á–∫–∏. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –≤–≤–µ–¥–∏—Ç–µ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É."
                    .truecolor(246, 196, 32)
            );
            loop {
                input.clear();
                stdin().read_line(&mut input).unwrap();

                if input.trim().len() == 0 {
                    break;
                }
                new_text += input.as_str();
            }
            ShowableData {
                id: data.id,
                name: update_or_save(new_name, data.name.clone()),
                notice: update_or_save(new_notice, data.notice.clone()),
                data: DataType::Document { text: new_text },
            }
        }
        DataType::Passport {
            fsl,
            date,
            sex,
            serial,
            num,
        } => {
            input.clear();
            print!(
                "{} ",
                "–í–≤–µ–¥–∏—Ç–µ –§–ò–û, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ ENTER:".truecolor(246, 196, 32)
            );
            stdout().flush().unwrap();

            stdin()
                .read_line(&mut input)
                .expect("–û—à–∏–±–∫–∞ —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏!");
            let new_fsl = {
                if input.trim().len() == 0 {
                    None
                } else {
                    Some(input.trim().to_string())
                }
            };

            let new_date = loop {
                input.clear();

                print!(
                    "{} ",
                    "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤—ã–¥–∞—á–∏ –ø–∞—Å–ø–æ—Ä—Ç–∞ (–î–î.–ú–ú.–ì–ì–ì–ì). –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ ENTER:"
                        .truecolor(246, 196, 32)
                );
                stdout().flush().unwrap();

                stdin()
                    .read_line(&mut input)
                    .expect("–û—à–∏–±–∫–∞ —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö!");

                input = input.trim().to_string();
                if input.len() == 0 {
                    break None;
                } else {
                    let date_m_year: Vec<String> =
                        input.split(".").map(|x| x.to_string()).collect();
                    if (date_m_year[0].len() == 2
                        && date_m_year[0].chars().all(|char| char.is_digit(10)))
                        && (date_m_year[1].len() == 2
                            && date_m_year[1].chars().all(|char| char.is_digit(10)))
                        && (date_m_year[2].len() == 4
                            && date_m_year[2].chars().all(|char| char.is_digit(10)))
                    {
                        break Some(input.clone());
                    } else {
                        println!("{}", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!".purple().bold());
                        continue;
                    }
                }
            };

            let new_sex = loop {
                input.clear();

                print!(
                    "{} ",
                    "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–ª (–º/–∂), –ª–∏–±–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ ENTER:".truecolor(246, 196, 32)
                );
                stdout().flush().unwrap();

                stdin()
                    .read_line(&mut input)
                    .expect("–û—à–∏–±–∫–∞ —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö");

                match input.trim() {
                    "–º" | "–ú" => {
                        break Some(Sex::Male);
                    }
                    "–∂" | "–ñ" => {
                        break Some(Sex::Female);
                    }
                    _ => {
                        if input.len() == 0 {
                            break None;
                        }
                        println!("{}", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –ø–æ–ª–∞!".purple().bold());
                        continue;
                    }
                }
            };

            let new_serial = loop {
                input.clear();

                print!(
                    "{} ",
                    "–í–≤–µ–¥–∏—Ç–µ —Å–µ—Ä–∏—é –ø–∞—Å—Å–ø–æ—Ä—Ç–∞ (4 —Ü–∏—Ñ—Ä—ã) –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ ENTER:"
                );
                stdout().flush().unwrap();

                stdin()
                    .read_line(&mut input)
                    .expect("–û—à–∏–±–∫–∞ —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è –≤–≤–æ–¥–∞!");

                if input.trim().len() == 0 {
                    break None;
                }

                match input.trim().parse::<u16>() {
                    Err(_) => {
                        println!("{}", "–û—à–∏–±–∫–∞ –≤ –≤–≤–æ–¥–µ —Å–µ—Ä–∏–∏!".purple().bold());
                        continue;
                    }
                    Ok(s) => {
                        if s.to_string().len() == 4 {
                            break Some(s);
                        } else {
                            println!("{}", "–í —Å–µ—Ä–∏–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 4 —Ü–∏—Ñ—Ä—ã!".purple().bold())
                        }
                    }
                }
            };

            let new_num = loop {
                input.clear();

                print!(
                    "{} ",
                    "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∞—Å—Å–ø–æ—Ä—Ç–∞ (6 —Ü–∏—Ñ—Ä), –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ ENTER:"
                        .truecolor(246, 196, 32)
                );
                stdout().flush().unwrap();

                stdin()
                    .read_line(&mut input)
                    .expect("–û—à–∏–±–∫–∞ —Å—á–∏—Ç—ã–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö!");

                if input.trim().len() == 0 {
                    break None;
                }
                match input.trim().parse::<u32>() {
                    Err(_) => {
                        println!("{}", "–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞!".purple().bold());
                        continue;
                    }
                    Ok(n) => {
                        if n.to_string().len() == 6 {
                            break Some(n);
                        } else {
                            println!("{}", "–í –Ω–æ–º–µ—Ä–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 6 —Ü–∏—Ñ—Ä!".purple().bold());
                            continue;
                        }
                    }
                }
            };

            ShowableData {
                id: data.id,
                name: update_or_save(new_name, data.name.clone()),
                notice: update_or_save(new_notice, data.notice.clone()),
                data: DataType::Passport {
                    fsl: update_or_save(new_fsl, fsl),
                    date: update_or_save(new_date, date),
                    sex: update_or_save(new_sex, sex),
                    serial: update_or_save(new_serial, serial),
                    num: update_or_save(new_num, num),
                },
            }
        }
        DataType::Password { .. } => {
            print!("{} ", "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:".truecolor(246, 196, 32));
            stdout().flush().unwrap();

            input = read_password().expect("–û—à–∏–±–∫–∞ —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è –≤–≤–æ–¥–∞!");
            ShowableData {
                id: data.id,
                name: update_or_save(new_name, data.name.clone()),
                notice: update_or_save(new_notice, data.notice.clone()),
                data: DataType::Password {
                    password: input.trim().to_string(),
                },
            }
        }
        DataType::WifiConfig { name, password } => {
            print!(
                "{} ",
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ/IP —Å–µ—Ç–∏, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ ENTER: "
                    .truecolor(246, 196, 32)
            );
            stdout().flush().unwrap();

            input.clear();
            stdin()
                .read_line(&mut input)
                .expect("–û—à–∏–±–∫–∞ —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö");
            let new_wifi = {
                if input.trim().len() == 0 {
                    None
                } else {
                    Some(input.trim().to_string())
                }
            };

            input.clear();
            print!(
                "{} ",
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ ENTER:".truecolor(246, 196, 32)
            );
            stdout().flush().unwrap();

            stdin()
                .read_line(&mut input)
                .expect("–û—à–∏–±–∫–∞ —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö");

            let new_pass = {
                if input.trim().len() == 0 {
                    None
                } else {
                    Some(input.trim().to_string())
                }
            };

            ShowableData {
                id: data.id,
                name: update_or_save(new_name, data.name.clone()),
                notice: update_or_save(new_notice, data.notice.clone()),
                data: DataType::WifiConfig {
                    name: update_or_save(new_wifi, name),
                    password: update_or_save(new_pass, password),
                },
            }
        }
        DataType::Token { token, from } => {
            print!(
                "{} ",
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω, –∏–Ω–∞—á–µ –ø—Ä–æ—Ç–æ –Ω–∞–∂–º–∏—Ç–µ ENTER:".truecolor(246, 196, 32)
            );
            stdout().flush().unwrap();

            input.clear();
            stdin()
                .read_line(&mut input)
                .expect("–û—à–∏–±–∫–∞ —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö");

            let new_token = {
                if input.trim().len() == 0 {
                    None
                } else {
                    Some(input.trim().to_string())
                }
            };

            input.clear();

            print!(
                "{} ",
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –æ—Ç —á–µ–≥–æ —Ç–æ–∫–µ–Ω, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ ENTER:"
                    .truecolor(246, 196, 32)
            );
            stdout().flush().unwrap();

            stdin()
                .read_line(&mut input)
                .expect("–û—à–∏–±–∫–∞ —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö");
            let new_from = {
                if input.trim().len() == 0 {
                    None
                } else {
                    Some(input.trim().to_string())
                }
            };

            ShowableData {
                id: data.id,
                name: update_or_save(new_name, data.name.clone()),
                notice: update_or_save(new_notice, data.notice.clone()),
                data: DataType::Token {
                    token: update_or_save(new_token, token),
                    from: update_or_save(new_from, from),
                },
            }
        }
    }
}
