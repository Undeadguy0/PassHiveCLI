use colored::*;
use crossterm::terminal::{disable_raw_mode, enable_raw_mode};
use strum::IntoEnumIterator;

use super::db::models;
use crate::ShowableData;
use crate::db::models::DataType;
use colored::Colorize;
use rpassword::read_password;
use std::io::{Write, stdin, stdout};

use std::{collections::BTreeMap, path::PathBuf};

pub struct DataFromUser {
    name: Option<String>,
    notice: Option<String>,
    data_type: models::DataType,
    data: String,
}

impl DataFromUser {
    fn new(
        name: Option<String>,
        notice: Option<String>,
        data_type: models::DataType,
        data: String,
    ) -> Self {
        DataFromUser {
            name,
            notice,
            data_type,
            data,
        }
    }
}

const main_yellow: (u8, u8, u8) = (246, 196, 32);

pub enum AccountManipulation {
    Regist,
    Auth,
}

pub fn hi() {
    println!("{}", "üêùüêùüêù –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤ PassHiveCLI! üêùüêùüêù".green());
}

pub fn check_success() {
    print!(
        "{}",
        "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ".truecolor(246, 196, 32)
    );
    print!("{}", "—É—Å–ø–µ—à–Ω–æ!\n".green().bold());
    stdout().flush().unwrap();
}

pub fn check_error(os: &String) {
    print!(
        "{}",
        "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ".truecolor(246, 196, 32)
    );
    print!("{}", "–Ω–µ —É–¥–∞–ª–æ—Å—å!\n".red().bold());
    stdout().flush().unwrap();

    println!(
        "{}",
        "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –±–∑–∑üêù".truecolor(246, 196, 32)
    );
    println!("–í–∞—à–∞ –û–° - {}", os.italic());
}

pub fn success_init_dir(path: &PathBuf) {
    print!("{}", "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ".truecolor(246, 196, 32));
    print!("{} ", path.display());
    print!("{}", "—Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n".green().bold());
}

pub fn init_db() {
    println!("{}", "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑—É—Ä—É—é –ë–î, –±–∑–∑\n".truecolor(246, 196, 32));
}

pub fn success_init_db() {
    print!("{}", "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ".truecolor(246, 196, 32));
    print!("{}", "—Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n".green().bold());
}

pub fn throw_err(msg: String) {
    panic!("{}", msg.bold().red());
}

pub fn db_conn_success() {
    print!("{}", "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î ".truecolor(246, 196, 32));
    print!("{}", "—É—Å–ø–µ—à–Ω–æ!\n".green().bold());
}

pub fn registration() -> (String, String) {
    println!("{}", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.".truecolor(246, 196, 32));

    let login = loop {
        let mut input = String::new();
        print!("{}", "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω: ");
        stdout().flush().unwrap();
        stdin().read_line(&mut input).unwrap();

        let input = input.trim();
        if input.is_empty() {
            println!("{}", "–õ–æ–≥–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!".red().bold());
        } else if input.len() <= 3 {
            println!("{}", "–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 3 —Å–∏–º–≤–æ–ª–æ–≤!".red().bold());
        } else if input.contains(' ') {
            println!("{}", "–õ–æ–≥–∏–Ω –Ω–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–±–µ–ª—ã!".red().bold());
        } else {
            break input.to_string();
        }
    };

    let password = loop {
        let mut input = String::new();
        print!(
            "{} ",
            "–í—ã –∂–µ–ª–∞–µ—Ç–µ –≤–≤–æ–¥–∏—Ç—å –ø–∞—Ä–æ–ª—å –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ? (–¥|y/–Ω|n):".truecolor(246, 196, 32)
        );
        stdout().flush().unwrap();
        stdin().read_line(&mut input).unwrap();

        let secret = match input.trim().to_lowercase().as_str() {
            "–¥" | "y" => true,
            "–Ω" | "n" => false,
            _ => {
                println!("{}", "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥!".red().bold());
                continue;
            }
        };

        let mut buf = String::new();
        print!("{}", "\n–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ");
        stdout().flush().unwrap();
        if secret {
            buf = read_password().expect("–û—à–∏–±–∫–∞ —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è");
        } else {
            stdin().read_line(&mut buf).unwrap();
        }

        print!("{}", "\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ");
        stdout().flush().unwrap();
        let mut buf2 = String::new();
        if secret {
            buf2 = read_password().unwrap_or_else(|_| {
                println!("{}", "\n–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞!".red().bold());
                String::new()
            });
        } else {
            stdin().read_line(&mut buf2).unwrap_or_default();
        }

        if buf.trim() != buf2.trim() {
            println!("{}", "\n–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!".red().bold());
            continue;
        }

        break buf.trim().to_string();
    };

    (login.trim().to_string(), password.trim().to_string())
}

pub fn regist_success(login: &String) {
    print!("{}", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ".truecolor(246, 196, 32));
    stdout().flush().unwrap();
    print!("{} ", login);
    stdout().flush().unwrap();
    print!("{}", "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω ".truecolor(246, 196, 32));
    print!("{}", "—É—Å–ø–µ—à–Ω–æ!\n".green().bold());
}

pub fn user_exists_err() {
    println!(
        "{}",
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!"
            .purple()
            .bold()
    );
}

pub fn log_or_reg() -> AccountManipulation {
    let mut input = String::new();

    loop {
        input.clear();
        print!(
            "{}",
            "–í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏–ª–∏ –≤–æ–π—Ç–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å? (—Ä|r/–≤|s) "
                .truecolor(246, 196, 32)
        );
        stdout().flush().unwrap();

        if let Err(_) = stdin().read_line(&mut input) {
            throw_err(("–û—à–∏–±–∫–∞ —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏").to_string());
        }

        match input.trim() {
            "–≤" | "s" => return AccountManipulation::Auth,
            "—Ä" | "r" => return AccountManipulation::Regist,
            _ => {
                println!(
                    "{}",
                    "–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑"
                        .purple()
                        .bold()
                );
                // println!("{input}");
            }
        }
    }
}

pub fn registration_success(login: &String) {
    println!(
        "{} {} {}",
        "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞".truecolor(246, 196, 32),
        login.truecolor(246, 196, 32),
        "—É—Å–ø–µ—à–Ω–∞!".green().bold()
    )
}

pub fn get_auth_data(path: &PathBuf) -> (String, String) {
    let mut input = String::new();

    let login = loop {
        input.clear();

        print!("{}", "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω: ".truecolor(246, 196, 32));
        stdout().flush().unwrap();

        if let Err(_) = stdin().read_line(&mut input) {
            throw_err("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏!".to_string());
        }

        if input.trim().len() == 0 {
            println!("{}", "\n–õ–æ–≥–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ü–£–°–¢–´–ú!".purple().bold());
            continue;
        }

        break input.clone();
    };

    let password = loop {
        input.clear();

        print!("{}", "\n–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ".truecolor(246, 196, 32));
        stdout().flush().unwrap();

        match rpassword::read_password() {
            Ok(pass) => {
                if pass.trim().len() == 0 {
                    println!("{}", "\n–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!".purple().bold());
                    continue;
                }
                break pass;
            }
            Err(_) => throw_err("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏!".to_string()),
        }
    };

    (login.trim().to_string(), password.trim().to_string())
}

pub fn auth_seccess() {
    println!(
        "{} {}",
        "–í—Ö–æ–¥ –≤ —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å".truecolor(246, 196, 32),
        "—É—Å–ø–µ—à–Ωe–Ω!".green().bold()
    );
}

pub fn auth_failure() {
    println!("{}", "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏–ª–∏ –ª–æ–≥–∏–Ω!".purple().bold());
}

pub fn show_all_data(data: &BTreeMap<String, Vec<ShowableData>>) {
    let mut counter = 0u32;
    let mut not_empty = false;
    let len = 30usize;

    for entry in data.iter() {
        let header: &str;
        match entry.0.as_str() {
            "password" => header = "–ø–∞—Ä–æ–ª–∏",
            "card" => header = "–±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã",
            "passport" => header = "–ø–∞—Å—Å–ø–æ—Ä—Ç—ã",
            "document" => header = "–¥–æ–∫—É–º–µ–Ω—Ç—ã",
            "wificonfig" => header = "Wifi —Å–µ—Ç–∏",
            "token" => header = "—Ç–æ–∫–µ–Ω—ã",
            _ => unreachable!("–û—à–∏–±–∫–∞ –∏–º–µ–Ω–∏ –∫–ª—é—á–∞ –≤ BTree!!!"),
        }
        if !entry.1.is_empty() {
            not_empty = true;
            let header_len = header.len();
            let decorate = "#".repeat((len - header_len) / 2 + 1);
            println!(
                "{} {} {}.",
                &decorate.truecolor(246, 196, 32),
                &header,
                &decorate.truecolor(246, 196, 32)
            );

            for row in entry.1.iter() {
                let data_in_str = row
                    .data
                    .to_string()
                    .split("\n")
                    .map(|x| x.to_string())
                    .collect::<Vec<_>>()
                    .join("\n");
                println!(
                    "{} {}",
                    (counter.to_string() + ":").truecolor(246, 196, 32),
                    &(row.name).truecolor(246, 196, 32)
                );
                counter += 1;
            }
        }
    }

    if !not_empty {
        println!(
            "{}",
            "########## –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–¥–µ—Å—å –ø—É—Å—Ç–æ... ########"
                .to_string()
                .truecolor(246, 196, 32)
        );
    }

    println!("")
}

pub fn show_hotkeys() {
    disable_raw_mode().unwrap();
    println!("{}", "–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏:".truecolor(246, 196, 32).bold());
    println!(
        "{} {}",
        "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å -".truecolor(246, 196, 32),
        "CTRL + A".bold()
    );
    println!(
        "{} {}",
        "–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å -".truecolor(246, 196, 32),
        "CTRL + D".bold()
    );
    println!(
        "{} {}",
        "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å -".truecolor(246, 196, 32),
        "CTRL + U".bold()
    );
    println!(
        "{} {}",
        "–í—ã–π—Ç–∏ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è -".truecolor(246, 196, 32),
        "CTRL + E".bold()
    );
    enable_raw_mode().unwrap();
}

pub fn get_new_row_data() -> Result<DataType, String> {
    disable_raw_mode().unwrap();

    let mut input = String::new();
    print!(
        "{}",
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):".truecolor(246, 196, 32)
    );
    stdout().flush().unwrap();
    if let Err(_) = stdin().read_line(&mut input) {
        return Err("–û—à–∏–±–∫–∞ —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏!".to_string());
    }

    let name = input.trim().to_string();
    input.clear();

    print!(
        "\n{}",
        "–í–≤–µ–¥–∏—Ç–µ –ø–æ—è—Å–Ω–µ–Ω–∏–µ –∫ –∑–∞–ø–∏—Å–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ): ".truecolor(246, 196, 32)
    );
    stdout().flush().unwrap();
    if let Err(_) = stdin().read_line(&mut input) {
        return Err("–û—à–∏–±–∫–∞ —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏!".to_string());
    }

    let notice = input.trim().to_string();
    input.clear();

    let all_data_types: Vec<DataType> = DataType::iter().collect();
    println!(
        "\n{}",
        "########## –¢–∏–ø—ã –∑–∞–ø–∏—Å–µ–π ##########".truecolor(246, 196, 32)
    );
    for data_type in all_data_types.iter().enumerate() {
        println!(
            "{}: {}",
            (data_type.0 + 1).to_string().bold(),
            data_type.1.name()
        );
    }
    print!(
        "{}: ",
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–ø–∏—Å–∏ (–Ω–æ–º–µ—Ä)".truecolor(246, 196, 32)
    );
    stdout().flush().unwrap();

    let ind_of_type: u8;
    loop {
        input.clear();
        if let Err(_) = stdin().read_line(&mut input) {
            return Err("–û—à–∏–±–∫–∞ —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏!".to_string());
        }
        match input.trim().parse::<u8>() {
            Err(_) => {
                println!(
                    "\n{}",
                    "–û—à–∏–±–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑"
                        .purple()
                        .bold()
                );
                continue;
            }
            Ok(ind) => {
                if ind as usize > all_data_types.len() {
                    println!(
                        "\n{}",
                        "–û—à–∏–±–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑"
                            .purple()
                            .bold()
                    );
                    continue;
                } else {
                    ind_of_type = ind;
                    break;
                }
            }
        }
    }

    match &all_data_types[ind_of_type as usize] {
        DataType::Card { num, cvv, bank } => {
            loop {
                print!(
                    "\n{} ",
                    "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (16 —Ü–∏—Ñ—Ä):".truecolor(246, 196, 32)
                );
                stdout().flush().unwrap();

                if let Err(_) = stdin().read_line(&mut input) {
                    return Err("–û—à–∏–±–∫–∞ —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏!".to_string());
                }

                let card_num;
                if input.trim().len() != 16 {
                    println!("\n{}", "–í –Ω–æ–º–µ—Ä–µ –∫–∞—Ä—Ç—ã 16 —Ü–∏—Ñ—Ä!!!".purple().bold());
                    continue;
                }
                if input.trim().chars().any(|char| !char.is_digit(10)) {
                    println!(
                        "\n{}",
                        "–í –Ω–æ–º–µ—Ä–µ –∫–∞—Ä—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¢–û–õ–¨–ö–û –¶–ò–§–†–´!".purple().bold()
                    );
                    continue;
                }
                card_num = input.trim().to_string();
                break;
            }
            print!(
                "\n{}",
                "–í–≤–µ–¥–∏—Ç–µ CVV –∫–∞—Ä—Ç—ã (4 —Ü–∏—Ñ—Ä—ã): ".truecolor(246, 196, 32)
            );
            stdout().flush().unwrap();

            let mut card_cvv: u16;
            loop {
                input.clear();
                if let Err(_) = stdin().read_line(&mut input) {
                    return Err("–û—à–∏–±–∫–∞ —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏!".to_string());
                }
                if input.trim().len() != 4 {
                    println!("\n{}", "–í CVV –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 4 —Ü–∏—Ñ—Ä—ã!!!".purple().bold());
                    continue;
                }
                if input.trim().chars().any(|char| !char.is_digit(10)) {
                    println!("\n{}", "–í CVV –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¢–û–õ–¨–ö–û –¶–ò–§–†–´!!!".purple().bold());
                    continue;
                }

                match input.trim().parse::<u16>() {
                    Ok(cvv) => {
                        card_cvv = cvv;
                        break;
                    }
                    Err(_) => {
                        println!("\n{}", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ —á–∏—Å–ª–∞!!!".purple().bold());
                        continue;
                    }
                }
            }
        }
        DataType::Token { token, from } => {}
        DataType::Password { password } => {}
        DataType::WifiConfig { name, password } => {}
        DataType::Document { text } => {}
        DataType::Passport {
            fsl,
            date,
            sex,
            serial,
            num,
        } => {}
    }

    enable_raw_mode().unwrap();
    return Err("–û—à–∏–±–∫–∞ —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏!".to_string());
}
