use core::prelude;
use std::{panic::AssertUnwindSafe, time::Duration};

use argon2::{
    Algorithm, Argon2, Params, PasswordHash, PasswordVerifier, Version,
    password_hash::{PasswordHasher, SaltString},
};
use indicatif::*;
use rand::TryRngCore;
use rand_core::{OsRng, RngCore};

pub fn encode(password: String) -> Result<(String, String), String> {
    let spinner = ProgressBar::new_spinner();
    let mut raw_salt: [u8; 32] = [0; 32];

    spinner.set_style(
        ProgressStyle::default_spinner()
            .tick_strings(&[
                "[    ]", "[=   ]", "[==  ]", "[=== ]", "[ ===]", "[  ==]", "[   =]", "[    ]",
            ])
            .template("{spinner} {msg}")
            .expect("–û—à–∏–±–∫–∞ —à–∞–±–ª–æ–Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–±–∞—Ä–∞"),
    );
    spinner.set_message(
        "üêù–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö—ç—à–∞ –ø–∞—Ä–æ–ª—è... –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ, –æ–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 10 —Å–µ–∫—É–Ω–¥!üêù",
    );
    spinner.enable_steady_tick(Duration::from_millis(120));

    if let Err(_) = OsRng.try_fill_bytes(&mut raw_salt) {
        return Err("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–ª–∏ –≤ –±–∏—Ç–æ–≤–æ–º –≤–∏–¥–µ".to_string());
    }

    let salt = SaltString::encode_b64(&raw_salt);

    if let Err(_) = salt {
        return Err("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–ª–∏".to_string());
    }

    let salt = salt.unwrap();

    let config = Params::new(65536, 10, 3, Some(64));

    if let Err(_) = config {
        return Err("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä–∞ Argon2".to_string());
    }

    let config = config.unwrap();

    let argon2 = Argon2::new(Algorithm::Argon2id, Version::V0x13, config);

    let hash = argon2.hash_password(password.as_bytes(), &salt);

    if let Err(_) = hash {
        return Err("–û—à–∏–±–∫–∞ —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è".to_string());
    }

    let hash = hash.unwrap();

    Ok((hash.to_string(), salt.to_string()))
}

pub fn check_password(hash: &String, pass: &String) -> Result<bool, String> {
    match PasswordHash::new(hash) {
        Ok(parsed) => {
            let spinner = ProgressBar::new_spinner();
            spinner.set_style(
                ProgressStyle::default_spinner()
                    .tick_strings(&[
                        "[    ]", "[=   ]", "[==  ]", "[=== ]", "[ ===]", "[  ==]", "[   =]",
                        "[    ]",
                    ])
                    .template("{spinner} {msg}")
                    .expect("–û—à–∏–±–∫–∞ —à–∞–±–ª–æ–Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–±–∞—Ä–∞"),
            );
            spinner.set_message(
                "üêù–°–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å —Å —Ö—ç—à–µ–º... –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ, –æ–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ –±–æ–ª–µ–µ 10 —Å–µ–∫—É–Ω–¥!üêù",
            );
            spinner.enable_steady_tick(Duration::from_millis(120));
            let argon2 = Argon2::default();
            return Ok(argon2.verify_password(pass.as_bytes(), &parsed).is_ok());
        }
        Err(e) => return Err(e.to_string()),
    }

    Err("–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ match –≤ check_password!".to_string())
}
